import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
    Users, 
    Mic, 
    MicOff, 
    Video, 
    VideoOff, 
    MoreVertical, 
    Crown, 
    UserMinus, 
    Shield,
    Volume2,
    VolumeX,
    Search,
    X,
    UserPlus,
    Settings,
    Ban,
    MessageSquare,
    Award,
    Copy
} from 'lucide-react';

const ParticipantItem = ({ participant, isHost, isCoHost, onMute, onRemove, onPromote, onMakeCoHost }) => {
    const [showMenu, setShowMenu] = useState(false);
    const canModerate = isHost || isCoHost;
    const isCurrentUserHost = participant.role === 'host';
    const isCurrentUserCoHost = participant.role === 'co-host';

    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-100 hover:border-gray-200 transition-all"
        >
            <div className="flex items-center space-x-3">
                <div className="relative">
                    <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-medium">
                        {participant.name.charAt(0).toUpperCase()}
                    </div>
                    {isCurrentUserHost && (
                        <Crown className="absolute -top-1 -right-1 w-4 h-4 text-yellow-500" />
                    )}
                    {isCurrentUserCoHost && (
                        <Shield className="absolute -top-1 -right-1 w-4 h-4 text-blue-500" />
                    )}
                </div>
                
                <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-gray-900 truncate">
                        {participant.name}
                        {participant.isYou && <span className="text-gray-500 ml-1">(You)</span>}
                    </p>
                    <p className="text-xs text-gray-500 capitalize">{participant.role}</p>
                </div>
            </div>

            <div className="flex items-center space-x-2">
                {/* Audio Status */}
                <div className={`p-1 rounded ${participant.audioEnabled ? 'text-green-600' : 'text-red-500'}`}>
                    {participant.audioEnabled ? <Mic className="w-4 h-4" /> : <MicOff className="w-4 h-4" />}
                </div>

                {/* Video Status */}
                <div className={`p-1 rounded ${participant.videoEnabled ? 'text-green-600' : 'text-red-500'}`}>
                    {participant.videoEnabled ? <Video className="w-4 h-4" /> : <VideoOff className="w-4 h-4" />}
                </div>

                {/* More Options */}
                {canModerate && !participant.isYou && (
                    <div className="relative">
                        <button
                            onClick={() => setShowMenu(!showMenu)}
                            className="p-1 text-gray-400 hover:text-gray-600 rounded transition-colors"
                        >
                            <MoreVertical className="w-4 h-4" />
                        </button>

                        <AnimatePresence>
                            {showMenu && (
                                <motion.div
                                    initial={{ opacity: 0, scale: 0.95 }}
                                    animate={{ opacity: 1, scale: 1 }}
                                    exit={{ opacity: 0, scale: 0.95 }}
                                    className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50"
                                >
                                    <button
                                        onClick={() => onMute(participant.id)}
                                        className="w-full px-3 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
                                    >
                                        <MicOff className="w-4 h-4" />
                                        <span>Mute</span>
                                    </button>
                                    
                                    {isHost && !isCurrentUserCoHost && (
                                        <button
                                            onClick={() => onMakeCoHost(participant.id)}
                                            className="w-full px-3 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
                                        >
                                            <Shield className="w-4 h-4" />
                                            <span>Make Co-Host</span>
                                        </button>
                                    )}
                                    
                                    <button
                                        onClick={() => onRemove(participant.id)}
                                        className="w-full px-3 py-2 text-left text-sm text-red-600 hover:bg-red-50 flex items-center space-x-2"
                                    >
                                        <UserMinus className="w-4 h-4" />
                                        <span>Remove</span>
                                    </button>
                                </motion.div>
                            )}
                        </AnimatePresence>
                    </div>
                )}
            </div>
        </motion.div>
    );
};

const ParticipantsPanel = ({ 
    participants = [],
    isVisible = false,
    onToggle,
    isHost = false,
    isCoHost = false,
    onMuteParticipant,
    onRemoveParticipant,
    onPromoteParticipant,
    onMakeCoHost,
    onInviteParticipants
}) => {
    const [searchTerm, setSearchTerm] = useState('');

    const filteredParticipants = participants.filter(participant =>
        participant.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (!isVisible) return null;

    return (
        <motion.div
            initial={{ opacity: 0, x: 300 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 300 }}
            className="fixed right-0 top-0 h-full w-80 bg-gray-50 border-l border-gray-200 z-40 flex flex-col"
        >
            {/* Header */}
            <div className="p-4 border-b border-gray-200 bg-white">
                <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-2">
                        <Users className="w-5 h-5 text-gray-600" />
                        <h3 className="text-lg font-semibold text-gray-900">
                            Participants ({participants.length})
                        </h3>
                    </div>
                    <button
                        onClick={onToggle}
                        className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
                    >
                        <X className="w-5 h-5" />
                    </button>
                </div>

                {/* Search */}
                <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <input
                        type="text"
                        placeholder="Search participants..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                </div>

                {/* Invite Button */}
                {(isHost || isCoHost) && (
                    <button
                        onClick={onInviteParticipants}
                        className="w-full mt-3 flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    >
                        <UserPlus className="w-4 h-4" />
                        <span>Invite Participants</span>
                    </button>
                )}
            </div>

            {/* Participants List */}
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
                <AnimatePresence>
                    {filteredParticipants.map((participant) => (
                        <ParticipantItem
                            key={participant.id}
                            participant={participant}
                            isHost={isHost}
                            isCoHost={isCoHost}
                            onMute={onMuteParticipant}
                            onRemove={onRemoveParticipant}
                            onPromote={onPromoteParticipant}
                            onMakeCoHost={onMakeCoHost}
                        />
                    ))}
                </AnimatePresence>

                {filteredParticipants.length === 0 && searchTerm && (
                    <div className="text-center py-8">
                        <Users className="w-12 h-12 text-gray-300 mx-auto mb-3" />
                        <p className="text-gray-500">No participants found</p>
                    </div>
                )}

                {participants.length === 0 && (
                    <div className="text-center py-8">
                        <Users className="w-12 h-12 text-gray-300 mx-auto mb-3" />
                        <p className="text-gray-500">No participants yet</p>
                        <p className="text-sm text-gray-400 mt-1">Invite others to join the meeting</p>
                    </div>
                )}
            </div>

            {/* Footer */}
            <div className="p-4 border-t border-gray-200 bg-white">
                <div className="flex items-center justify-between text-sm text-gray-500">
                    <span>Meeting ID: MTG-{Math.random().toString(36).substr(2, 6).toUpperCase()}</span>
                    <button className="text-blue-600 hover:text-blue-700 flex items-center space-x-1">
                        <Copy className="w-3 h-3" />
                        <span>Copy</span>
                    </button>
                </div>
            </div>
        </motion.div>
    );
};

export default ParticipantsPanel;